{"version":3,"sources":["components/Info/Info.tsx","components/SearchInput/SearchInput.tsx","components/ButtonFilter/ButtonFilter.tsx","utils/constants.ts","components/SearchPanel/SearchPanel.tsx","icons/ImportantIcon.tsx","icons/DoneIcon.tsx","icons/DeleteIcon.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoItemAddForm/TodoItemAddForm.tsx","components/App/App.tsx","index.tsx"],"names":["Info","inWork","done","className","SearchInput","handleChange","textForSearch","placeholder","type","value","onChange","ButtonFilter","label","name","filter","onFilter","classNames","onClick","todoListDefault","id","subtitle","important","buttonFilterArray","SearchPanel","map","item","ImportantIcon","xmlns","width","height","fill","viewBox","d","DoneIcon","DeleteIcon","TodoItem","onDelete","onToggleDone","onToggleImportant","TodoList","todoListArray","TodoItemAddForm","addNewTaskInState","useState","textForNewTask","setTextForNewTask","onSubmit","event","preventDefault","e","target","App","infoSearchObject","setInfoSearchObject","todoListStateArray","setTodoListStateArray","visibleTodoListItems","setVisibleTodoListItems","setTextForSearch","useEffect","arr","newArray","search","length","toLowerCase","includes","searchInputFilter","generalToggle","propertyName","idx","findIndex","result","splice","newTask","min","max","Math","random","addNewTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04fad7b3.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport './Info.css';\r\n\r\ninterface InfoInterface {\r\n    inWork: string\r\n    done: string\r\n}\r\n\r\nconst Info: FC<InfoInterface> = ({inWork,done}) => {\r\n    return (\r\n        <section className=\"info\">\r\n            <h1 className=\"info__title\">ToDo List</h1>\r\n            <p className=\"info__subtitle\">{`${inWork} in work and ${done} done`}</p>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Info;\r\n","import React, {FC, ChangeEvent} from \"react\";\r\n\r\ninterface SearchInputInterface {\r\n    handleChange: (e : ChangeEvent<HTMLInputElement>) => void,\r\n    textForSearch: string,\r\n}\r\n\r\nconst SearchInput: FC<SearchInputInterface> = ({handleChange, textForSearch}) => {\r\n\r\n\r\n\r\n\r\n    return (\r\n        <input className=\"form-control\" placeholder=\"Enter to search\" type=\"text\" value={textForSearch}\r\n               onChange={handleChange}/>\r\n    );\r\n}\r\n\r\nexport default SearchInput;\r\n","import React, {FC} from \"react\";\r\nimport './ButtonFilter.css';\r\n\r\ninterface ButtonFilterInterface {\r\n    label: string,\r\n    name: string,\r\n    filter: string,\r\n    onFilter: () => void,\r\n}\r\n\r\nconst ButtonFilter: FC<ButtonFilterInterface> = ({label,name,filter,onFilter}) => {\r\n\r\n    const isActive = name === filter;\r\n    const classNames = 'btn ' + (isActive ? 'btn-secondary' : 'btn-outline-secondary');\r\n\r\n    return (\r\n        <button className={classNames} type=\"button\" onClick={onFilter}>{label}</button>\r\n    );\r\n}\r\n\r\nexport default ButtonFilter;\r\n","export const todoListDefault = [\r\n    {id: 1, subtitle: 'Read Typescript documentation', important: false, done: false},\r\n    {id: 2, subtitle: 'Buy cat food', important: false, done: false},\r\n    {id: 3, subtitle: 'Make a ToDo List', important: true, done: false},\r\n    {id: 4, subtitle: 'Play new game from Paradox', important: false, done: false},\r\n]\r\n\r\nexport const buttonFilterArray = [\r\n    {name: 'all', label: 'All'},\r\n    {name: 'active', label: 'Active'},\r\n    {name: 'done', label: 'Done'},\r\n]\r\n\r\n\r\nexport interface TodoItemInterface  {\r\n    id: number,\r\n    subtitle: string,\r\n    important: boolean,\r\n    done: boolean,\r\n\r\n};\r\n","import React, {FC, ChangeEvent} from \"react\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport ButtonFilter from \"../ButtonFilter/ButtonFilter\";\r\nimport './SearchPanel.css';\r\nimport {buttonFilterArray} from \"../../utils/constants\";\r\n\r\ninterface SearchPanelInterface {\r\n    onFilter: (value: string) => void,\r\n    filter: string,\r\n    handleChange: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    textForSearch: string,\r\n}\r\n\r\nconst SearchPanel: FC<SearchPanelInterface> = ({onFilter, filter, textForSearch, handleChange}) => {\r\n    return (\r\n        <section className=\"search-panel\">\r\n            <SearchInput textForSearch={textForSearch} handleChange={handleChange}/>\r\n            <div className=\"btn-group ms-1\">\r\n                {buttonFilterArray.map(item =>\r\n                    <ButtonFilter key={item.name} label={item.label} name={item.name} filter={filter} onFilter={() => {\r\n                        onFilter(item.name);\r\n                    }}/>\r\n                )}\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default SearchPanel;\r\n","import React, { FC } from \"react\";\r\n\r\nconst ImportantIcon: FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" className=\"bi bi-exclamation\"\r\n             viewBox=\"0 0 16 16\">\r\n            <path\r\n                d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.553.553 0 0 1-1.1 0L7.1 4.995z\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default ImportantIcon;\r\n","import React, { FC } from \"react\";\r\n\r\nconst DoneIcon: FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" className=\"bi bi-check\"\r\n             viewBox=\"0 0 16 16\">\r\n            <path\r\n                d=\"M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default DoneIcon;\r\n","import React, { FC } from \"react\";\r\n\r\nconst DeleteIcon: FC = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" className=\"bi bi-trash2\"\r\n             viewBox=\"0 0 16 16\">\r\n            <path\r\n                d=\"M14 3a.702.702 0 0 1-.037.225l-1.684 10.104A2 2 0 0 1 10.305 15H5.694a2 2 0 0 1-1.973-1.671L2.037 3.225A.703.703 0 0 1 2 3c0-1.105 2.686-2 6-2s6 .895 6 2zM3.215 4.207l1.493 8.957a1 1 0 0 0 .986.836h4.612a1 1 0 0 0 .986-.836l1.493-8.957C11.69 4.689 9.954 5 8 5c-1.954 0-3.69-.311-4.785-.793z\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default DeleteIcon;\r\n","import React, {FC} from \"react\";\r\nimport './TodoItem.css';\r\nimport ImportantIcon from \"../../icons/ImportantIcon\";\r\nimport DoneIcon from \"../../icons/DoneIcon\";\r\nimport DeleteIcon from \"../../icons/DeleteIcon\";\r\n\r\ninterface TodoItemInterface {\r\n    name: string,\r\n    onDelete: () => void,\r\n    onToggleDone: () => void,\r\n    onToggleImportant: () => void,\r\n    important: boolean,\r\n    done: boolean,\r\n}\r\n\r\n\r\n\r\nconst TodoItem: FC<TodoItemInterface> = ({name,onDelete,onToggleDone, onToggleImportant, important, done}) => {\r\n    return (\r\n        <li className=\"todolist__item\">\r\n            <p className={`todolist__subtitle ${important ? 'todolist__subtitle_important' : ''} ${done ? 'todolist__subtitle_done' : ''}`} onClick={onToggleDone}>{name}</p>\r\n            <div className=\"todolist__icon-container\">\r\n                <button type=\"button\" className=\"btn btn-outline-success\" onClick={onToggleImportant}>\r\n                    <ImportantIcon/>\r\n                </button>\r\n\r\n                <button type=\"button\" className=\"btn btn-outline-primary ms-1\" onClick={onToggleDone}>\r\n                    <DoneIcon/>\r\n                </button>\r\n\r\n                <button type=\"button\" className=\"btn btn-outline-danger ms-1\" onClick={onDelete}>\r\n                    <DeleteIcon/>\r\n                </button>\r\n            </div>\r\n\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {FC} from \"react\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\nimport './TodoList.css';\r\nimport {TodoItemInterface} from \"../../utils/constants\";\r\n\r\ninterface TodoListInterface {\r\n    todoListArray: TodoItemInterface[],\r\n    onDelete: (value : number) => void,\r\n    onToggleDone: (value : number) => void,\r\n    onToggleImportant: (value : number) => void\r\n}\r\n\r\nconst TodoList: FC<TodoListInterface> = ({todoListArray,onDelete,onToggleDone, onToggleImportant}) => {\r\n    return (\r\n        <section className=\"todolist\">\r\n            <h2 className=\"todolist__title\">Tasks for today</h2>\r\n            <ul className=\"todolist-ul\">\r\n                {todoListArray.map(item => {\r\n                        const id = item.id;\r\n                        return (<TodoItem\r\n                            name={item.subtitle}\r\n                            key={item.id}\r\n                            important={item.important}\r\n                            done={item.done}\r\n\r\n                            onDelete={() => {\r\n                                onDelete(id)}\r\n                            }\r\n                            onToggleDone={() => {\r\n                                onToggleDone(id)}\r\n                            }\r\n                            onToggleImportant={() => {\r\n                                onToggleImportant(id)}\r\n                            }\r\n                        />)\r\n                    }\r\n                )}\r\n            </ul>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {FC, FormEvent, useState} from \"react\";\r\nimport './TodoItemAddForm.css';\r\n\r\ninterface TodoItemAddForm {\r\n    addNewTaskInState: (text : string) => void,\r\n}\r\n\r\nconst TodoItemAddForm: FC<TodoItemAddForm> = ({addNewTaskInState}) => {\r\n\r\n    const [textForNewTask, setTextForNewTask] = useState('');\r\n\r\n    const onSubmitTaskForm= (event : FormEvent<HTMLFormElement> ) => {\r\n        event.preventDefault();\r\n        addNewTaskInState(textForNewTask);\r\n        setTextForNewTask('');\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <section className=\"todoitem-add mx-auto mt-2\">\r\n            <form className=\"todoitem-add__form\" onSubmit={onSubmitTaskForm}>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"What else do you want to do?\"\r\n                    value={textForNewTask}\r\n                    onChange={(e) => {setTextForNewTask(e.target.value)}}\r\n                />\r\n                <button type=\"submit\" className=\"btn btn-outline-secondary ms-2 w-25\">Add new task</button>\r\n            </form>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default TodoItemAddForm;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Info from \"../Info/Info\";\r\nimport SearchPanel from \"../SearchPanel/SearchPanel\";\r\nimport TodoList from \"../TodoList/TodoList\";\r\nimport TodoItemAddForm from \"../TodoItemAddForm/TodoItemAddForm\";\r\nimport {TodoItemInterface, todoListDefault} from \"../../utils/constants\";\r\n\r\n\r\nfunction App() {\r\n    const [infoSearchObject, setInfoSearchObject] = useState({inWork: '', done: '', filter: 'all'});\r\n    const [todoListStateArray, setTodoListStateArray] = useState<TodoItemInterface[] | []>(todoListDefault);\r\n    const [visibleTodoListItems, setVisibleTodoListItems] = useState<TodoItemInterface[] | []>(todoListDefault);\r\n    const [textForSearch, setTextForSearch] = useState('');\r\n\r\n\r\n    function getRandomArbitrary(min: number, max: number) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n\r\n    const addNewTask = (subtitle: string) => {\r\n        return {\r\n            id: getRandomArbitrary(10, 100),\r\n            subtitle,\r\n            important: false,\r\n            done: false\r\n        }\r\n    }\r\n\r\n    const addNewTaskInState = (subtitle: string) => {\r\n        setTodoListStateArray((todoListStateArray) => {\r\n            const newTask = addNewTask(subtitle);\r\n            return [...todoListStateArray, newTask]\r\n        })\r\n\r\n    }\r\n\r\n    const filterItems = (arr: TodoItemInterface[], filter: string): TodoItemInterface[] => {\r\n        if (filter === 'all') {\r\n            return arr;\r\n        } else if (filter === 'active') {\r\n            return arr.filter((item) => (!item.done));\r\n        } else if (filter === 'done') {\r\n            return arr.filter((item) => item.done);\r\n        }\r\n        return arr;\r\n\r\n    };\r\n\r\n    const searchInputFilter = (arr: TodoItemInterface[], search: string) => {\r\n        if (search.length === 0) {\r\n            return arr;\r\n        }\r\n\r\n        return arr.filter((item) => {\r\n            return item.subtitle.toLowerCase().includes(search.toLowerCase());\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const newArray = searchInputFilter(filterItems(todoListStateArray, infoSearchObject.filter), textForSearch);\r\n\r\n        setVisibleTodoListItems(newArray);\r\n\r\n\r\n    }, [infoSearchObject, todoListStateArray, textForSearch])\r\n\r\n    const deleteTaskFromState = (id: number) => {\r\n        setTodoListStateArray((todoListStateArray) => {\r\n            const newArray = todoListStateArray.filter(item => item.id !== id);\r\n            return newArray\r\n        })\r\n    }\r\n    const generalToggle = (arr: TodoItemInterface[], id: number, propertyName: keyof TodoItemInterface) => {\r\n        const idx = arr.findIndex((item) => item.id === id);\r\n        const oldItem = arr[idx];\r\n\r\n        const value = !oldItem[propertyName];\r\n\r\n        const item = {...arr[idx], [propertyName]: value};\r\n\r\n        let result = [...arr];\r\n        result.splice(idx, 1, item);\r\n\r\n        setTodoListStateArray(result);\r\n\r\n    };\r\n\r\n    const onToggleDone = (id: number) => {\r\n        generalToggle(todoListStateArray, id, 'done');\r\n    }\r\n\r\n    const onToggleImportant = (id: number) => {\r\n        generalToggle(todoListStateArray, id, 'important');\r\n    }\r\n\r\n    const onFilter = (name: string) => {\r\n        setInfoSearchObject({...infoSearchObject, filter: name});\r\n\r\n    }\r\n\r\n    const handleChangeSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTextForSearch(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <main className=\"content w-50 mx-auto\">\r\n            <Info\r\n                inWork={infoSearchObject.inWork}\r\n                done={infoSearchObject.done}/>\r\n            <SearchPanel\r\n                textForSearch={textForSearch}\r\n                handleChange={handleChangeSearch}\r\n                filter={infoSearchObject.filter}\r\n                onFilter={onFilter}/>\r\n            <TodoList\r\n                onToggleDone={onToggleDone}\r\n                onToggleImportant={onToggleImportant}\r\n                onDelete={deleteTaskFromState}\r\n                todoListArray={visibleTodoListItems}/>\r\n            <TodoItemAddForm addNewTaskInState={addNewTaskInState}/>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}